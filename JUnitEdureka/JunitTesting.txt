What is a Unit Test?
--------------------

- Unit testing is used to verify the correct execution for a small chunk of code by creating a path, function or a method.

What is JUnit?
--------------

- JUnit is a regression testing framework used for implementing unit testing in Java.
- This framework also allows quick and easy generation of test data and test cases.
- It is important for test-driven development.

Advantages of the JUnit testing framework
-----------------------------------------

- It allows you to write code faster, which increased quality.
- It is elegantly simple.
- Provides annotations to identify test methods.
- It provides test runners for running tests.
- Tests can be executed automatically.
- Tests can be organised into test suites.

Features of the JUnit Framework
-------------------------------

1. Test Fixtures - ensures that there is a well-known and fixed environment in which tests are run so that results are repeatable. (setUp() and tearDown())
2. Test suites - is used to execute multiple test cases in a specific order. It can be done by combining all the test cases in a single origin. (@Runwith and @SuiteClasses)
3. Test runners - is used for executing the test cases. The JUnitCore class is used in order to execute the tests. runClasses() is used to run one or several test cases. The return type of this method is the result object that is used to access information about the tests.
4. JUnit classes - are used in writing and testing JUnits. Some import classes used are: Assert, TestCase and TestResult

JUnit Annotations and Assert statements
---------------------------------------

JUnit is built on annotations:

- An annotation is a special form of syntactic metadata that can be added to the java source code for better code readability.

Annotations		Description
-----------		-----------
@Test			The Test annotation tells JUnit that the public void method can be run as a	test case.
@Before			Annotating a public void method with @Before causes that method to be run before each Test method.
@After			If you allocate external resources in a Before method, you will need to release them after the tests run. Annotating the method with @After causes that method 			to be run after the Test method.
@BeforeClass		Annotating a public static void method with @BeforeClass causes it to be run once before any of the test methods in the class.
@AfterClass		This method runs after all the tests are run. It is used to perform clean-up activities.
@Ignore			The ignore annotation is used to ignore the test and that test will not be executed.

Assert is a method used to determine either a pass or a fail status of a test case. In JUnit, all the assertions are in the Assert class.

Method							                        Description
------							                        -----------
void assertEquals(boolean expected, boolean actual)	    Checks that 2 primitives/bjects are equal.
void assertTrue(boolean condition)			            Check whether the condition is true.
void assertFalse(boolean condition)			            Check whether the condition is false.
void assertNull(Object object)				            Check whether an object is a null.
void assertNotNull(Object object)			            Check whether an object is not null.
void assertSame(Object object1, Object object2)		    This tests if 2 object reference point to the same object.
void assertNotSame(Object object1, Object object2)	    This tests if 2 object reference do NOT point to the same object.
void assertArrayEqual(expectedArray, resultArray)	    The assertArrayEquals() methid will test whether 2 arrays are equal to each other.

You can test whether the code throws the desired exception. The expected parameter is used along with @Test annotation.












